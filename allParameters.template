# This is a SCARF parameter file example for analyzing tomato (H) and S. pennellii
# (P) genomes.  Change these two comment lines to list YOUR analyzed genomes.

################################################################################
################################################################################

# All paths, directories, filenames, and program parameters required for running
# the SCARF pipeline are defined here, including paths to programs that are used,
# input files that are used, and some of the output files that are generated.

# This is a TEMPLATE FILE giving an example of how to define each parameter.
### DO NOT EDIT THIS FILE.  COPY THIS FILE to a new file name that suggests the
# analysis you are doing.  For example, if you are doing an analysis of tomato
# and S. pennellii genomes and you plan to use the letters H and P to represent
# those two genomes, you might copy it to a new file name as follows:
#       cp allParameters.template allParameters.HP

# After copying this file to your own file name, EDIT YOUR NEW FILE and set the
# parameters to the values required for your analysis.  Read through the file
# carefully to see what needs to be changed.  This file has been filled in with
# actual values as EXAMPLES.  CHANGE these values to appropriate ones for your
# analysis.

# You use this parameter file to run the SCARF pipeline by specifying the
# parameter file's name in a 'make' command using the PARAMS command line
# argument.  For example, if the SCARF pipeline files were installed in
# directory ~/SCARF, then to run the pipeline using the new file name shown
# in the cp command above, you would use these commands:
#       cd ~/SCARF
#       make PARAMS=allParameters.HP
# These commands change to the directory where you installed the SCARF pipeline
# files and then run 'make', and then 'make' will read Makefile and include the
# allParameters.HP file in order to define parameters and files for running a
# set of genomes through the SCARF pipeline.

# The 'make' command by default shows usage information describing the arguments
# available for actually running the pipeline.  Read that information to see how
# you can run the pipeline.  To actually run the entire pipeline, the command
# would be:
#       make PARAMS=allParameters.HP ALL
# However, this is not recommended, as it takes a long time to run all the
# elements of the pipeline, and it can be a good idea to run it piece by piece,
# to look for errors and problems as you go.  The usage information shows how
# to run it piece by piece.

# Many paths and filenames defined here are located in or under the pipeline
# install directory, and the definitions would normally specify a pathname or
# filename relative to it.  That is, if a filename doesn't start with "/", it
# is relative to the install directory, and that would be the usual way to
# specify many of the filenames here.

# All definitions in this file are 'make' variable assignments.  A variable is
# replaced by its value when you write $(VARIABLE_NAME).  Some variables are
# defined here and then used in $() constructs in subsequent definitions of
# other variables.  You can add as many of your own variables as you want to
# this file to help you define directory and file names.

# All system environment variables are automatically predefined as make variables
# by 'make' itself, so you can use $(ENVIRONMENT_VARIABLE_NAME) to access the
# value of an environment variable.

### Many definitions in here should NEVER need to be changed.  Each parameter
### has a BOLD COMMENT STARTING WITH "### " saying whether that parameter should
### be changed, seldom needs changed, already has a reasonable value, etc.

################################################################################
################################################################################


################################################################################
# Path of the working directory.  This must be a complete pathname, not ".", of
# the SCARF installation directory.
################################################################################

# In this example I use a path on my computer where my SCARF files are located,
# and I refer to the environment variable BRADYLAB which I have set to the
# path of my Brady lab root folder.
### CHANGE THIS TO YOUR SCARF DIRECTORY.

WD := $(BRADYLAB)/Genomes/kmers/SCARF


################################################################################
# Paths of required installed software outside of the pipeline software, and
# commands for running it.
################################################################################

# Path to the file that is the 'jellyfish' program file.  Set this to the
# jellyfish file in the directory where you built jellyfish or to the place
# where you moved it such as a bin directory.
### CHANGE THIS TO YOUR PATH.

# In this example, after building the jellyfish program I copied the program to
# my bin directory.
PATH_JELLYFISH := ~/bin/jellyfish


# Number of entries in Jellyfish hash.  This should be large enough to make
# Jellyfish run fast, without being so large that it uses up more memory than
# is available.  On a 16GB RAM machine, I was able to use a size of 80000000.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

JELLYFISH_HASH_SIZE := 80000000


# Path to the file that is the 'perl' program file.  Use the command line command
# 'which perl' to show this path on your computer, and put it here.
### CHANGE THIS TO YOUR PATH.

# This is what 'which perl' showed on my computer.
PATH_PERL := ~/perl5/perlbrew/perls/perl-5.14.2/bin/perl


# Path to the file that is the 'Rscript' program file that is part of the R
# programming system.  The 'Rscript' program allows an R program to be run from
# the command line.  After installing the R programming system, use the command
# line command 'which Rscript' to show this path on your computer, and put it here.
### CHANGE THIS TO YOUR PATH.

# This is what 'which Rscript' showed on my computer.
PATH_RSCRIPT := /usr/bin/Rscript


# Path to the file that is the 'primer3_core' program file that is part of the
# primer3 package.  Set this to the primer3core file in the directory where you
# built primer3 or to the place where you moved it such as a bin directory.
### CHANGE THIS TO YOUR PATH.

# In this example, after building the primer3 program in my ~/bin directory, the
# primer3core file was located in that directory.
PATH_PRIMER3CORE := ~/bin/primer3_core


# Path to the file that is the 'e-PCR' program file that is part of the NCBI
# e-PCR package.  Set this to the e-PCR file in the directory where you built
# e-PCR or to the place where you copied it such as a bin directory.
### CHANGE THIS TO YOUR PATH.

# In this example, after building the e-PCR program in one directory, I copied
# it to my ~/bin directory.
PATH_EPCR := ~/bin/e-PCR


################################################################################
# Paths of software that is part of the pipeline software, and commands for
# running it.
################################################################################


# Path of the directory containing the pipeline "findMers.cpp" file and, after
# findMers.cpp has been compiled, the "findMers" file.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_FINDMERS := code/cpp/findMers


# Path to the file that is the 'findMers' program file.
### THIS DOES NOT NEED TO BE CHANGED.

PATH_FINDMERS := $(DIR_FINDMERS)/findMers


# Arguments for running the 'findMers' program.
### THIS DOES NOT NEED TO BE CHANGED.

ARGS_FINDMER := -c


# Path of the directory containing pipeline Perl scripts.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_PERL := code/perl


# Path of the pipeline Perl scripts.
### THESE DO NOT NEED TO BE CHANGED.

PATH_EXTRACT_SEQ_IDS := $(DIR_PERL)/extractSeqIdsAndLengths.pl
PATH_KMER_ISECT := $(DIR_PERL)/kmerIsect.pl
PATH_GET_SEQS_FASTA := $(DIR_PERL)/getSeqsFromFasta.pl


# Path of the directory containing pipeline R scripts.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_R := code/R


# Path of the pipeline R scripts.
### THESE DO NOT NEED TO BE CHANGED.

PATH_SPLIT_KMERS := $(DIR_R)/splitKmers.R
PATH_FIND_LCRS := $(DIR_R)/findLCRs.R
PATH_FIND_INDELS := $(DIR_R)/findINDELs.R
PATH_GET_DNA_SEQS := $(DIR_R)/getDNAseqs.R
PATH_FIND_PRIMERS := $(DIR_R)/findPrimers.R
PATH_EPCR_TESTING := $(DIR_R)/ePCRtesting.R
PATH_RMV_BAD_MARKERS := $(DIR_R)/removeBadMarkers.R
PATH_PLOT_MARKERS := $(DIR_R)/plotMarkers.R


################################################################################
# Delete or trash files when invoking make to clean files?
################################################################################

# Path of the directory containing unix shell files.
### THIS SHOULD NOT NEED TO BE CHANGED FOR UNIX-BASED SYSTEMS.

DIR_SHELL := code/shell


# Command to invoke shell file trash.sh to move files to the trash bin.  If your
# system has no trash bin, remove this and don't use it below.
### THIS DOES NOT NEED TO BE CHANGED.

# (This shell file command will work on Mac OSX to move files to the trash bin.)
CMD_TRASH := $(SHELL) $(DIR_SHELL)/trash.sh


# Command to delete file(s) including directories.
# For systems based on UNIX, such as Mac OSX, use one of these:
#   rm -f       If you want CLEAN_OUT_DIR to leave directories but remove files.
#   rm -fd      If you want CLEAN_OUT_DIR to remove directories and their files.
### THIS SHOULD NOT NEED TO BE CHANGED FOR UNIX-BASED SYSTEMS.

CMD_DELETE := rm -fd


# Command for deleting files when you do 'make' with CLEAN=1 or CLEAN_OUT_DIR=1.
# Set this to '$(CMD_DELETE)' if you want to completely delete files when you do
# a "clean" operation for removing files, or set it to '$(CMD_TRASH)' to move
# the files to the trash bin.
### CHANGE THIS TO YOUR CHOICE OF THE TWO

CMD_DELETE_WHEN_CLEANING := $(CMD_TRASH)


################################################################################
# Pipeline command timing.
################################################################################

# Set TIME_CMDS to YES if you wish to time each pipeline command, NO if not.
# When set to YES, each pipeline command will be executed with the shell command
# '(time <command>) 2>&1'.  The 'time' program executes <command> and times it,
# and when it finishes, it prints out the amount of time it used (on stderr,
# which is redirected to stdout with 2>&1), in this format:
#   real    0m0.002s
#   user    0m0.000s
#   sys     0m0.001s
# These values indicate the amount of time required to execute the command.  For
# details on their interpretation, see 'man time'.
### CHANGE THIS TO "NO" IF YOU DON'T WANT TO SEE COMMAND TIMING INFO IN THE OUTPUT.

TIME_CMDS := YES


################################################################################
# Value of "k" to use, i.e. the length of a k-mer in base-pairs.  Too small a
# value will result in too few common unique k-mers.  The computation time and
# memory requirements increase dramatically as this is increased.  A value of
# K=14 has worked wellfor the tomato genome without using too much memory.  A
# significantly larger genome might require use of K=15.  Use an upper-case
# letter K here.
################################################################################

### CHANGE THIS TO THE VALUE OF K THAT YOU WANT.  THIS VALUE USUALLY WORKS WELL.
K := 14


################################################################################
# Number of genomes to be analyzed.  Must be 2 or more.  If more than two, other
# definitions in this file that are based on genomes will need to be expanded to
# include one definition per genome.
################################################################################

### CHANGE THIS TO YOUR NUMBER OF GENOMES TO BE ANALYZED.
N_GENOMES := 2


# Genome numbers, starting at 1, separated from each other by a space.  If
# N_GENOMES is more than 2, add additional numbers to this.  Believe it or not,
# it seems to be very difficult to generate this sequence automatically in 'make',
# as, despite all its macros, it has no concept of arithmetic and counting.
### CHANGE THIS TO 1 2 3 ... N_GENOMES

GENOME_NUMBERS := 1 2


################################################################################
# Letters to assign to genomes.  Choose one UPPER CASE letter to represent each
# genome.  The first genome, referred to as genome 1, is the REFERENCE GENOME.
# The reference genome can be chosen at random if there is not one genome that
# is the obvious one.  It would be best to choose one with as few sequence IDs
# as possible, so if one genome has chromosome IDs (i.e. pseudomolecules) and
# the other(s) have scaffolds, choose the one with chromosomes as the reference.
#
# Genome 1 data columns will appear first in output files, genome 2 data columns
# second, and so on.
#
# You must define exactly N_GENOMES definitions, with a different UPPER CASE
# letter for each one.
################################################################################

# In this example, we use two genomes, the Heinz tomato genome (letter H) and
# the Solanum pennellii genome (letter P).  The tomato genome is the reference
# genome.
### CHANGE THESE (AND ADD MORE IF NECESSARY) TO ASSIGN LETTERS TO YOUR GENOMES.

GENOME_1 := H
GENOME_2 := P


# Combine the above letters together with one space between each letter.
### DO NOT CHANGE THIS.

GENOME_LETTERS := $(foreach X,$(GENOME_NUMBERS),$(GENOME_$(X)))


# Combine the above letters together with no spaces into a single string.
### DO NOT CHANGE THIS.

GENOME_LETTERS_SQUISHED := $(shell echo "$(GENOME_LETTERS)" | sed "s/ //g")


################################################################################
# Path of main output directory where output files will be placed.
################################################################################

# It is useful to include the genome letters and the value of k in the name, so
# that a different run with different genomes or k will produce output in a
# different folder.  This directory will be created if it doesn't exist.
### THIS DOES NOT NEED TO BE CHANGED, BUT TAKE NOTE OF THE DIRECTORY NAME.

DIR_SCARF_OUT := out$(GENOME_LETTERS_SQUISHED)$(K)


################################################################################
# Paths of FASTA files containing the genomes to be analyzed, and for output
# files that are generated from the FASTA files.
################################################################################

# Path to parent folder of all genome data.
### YOU ONLY NEED TO DEFINE THIS IF YOU USE IT IN OTHER ASSIGNMENTS BELOW.
### OTHERWISE, DELETE THIS.

# (This example assumes that an environment variable named "BRADYLAB" has been
# defined, that gives the path to a high-level directory.)
DIR_GENOME_DATA := $(BRADYLAB)/Genomes


# Directories containing the FASTA files for the N_GENOMES genomes.
### YOU ONLY NEED TO DEFINE THIS IF YOU USE IT IN OTHER ASSIGNMENTS BELOW.
### OTHERWISE, DELETE THIS.

# (This example uses the DIR_GENOME_DATA variable above to define the directories
# containing files for the two genomes to be run through the SCARF pipeline.)
DIR_GENOME_DATA_1 := $(DIR_GENOME_DATA)/Soly/ITAG2.4_release
DIR_GENOME_DATA_2 := $(DIR_GENOME_DATA)/Sope/V2.0genome


# Paths of the N_GENOMES FASTA files containing the genome sequences being
# analyzed.  Each variable name must be the string "PATH_GENOME_FASTA_" followed
# by the genome number.
### SET THESE TO YOUR GENOME FASTA FILE PATHS.

# The ITAG2.4_genomic.fasta genome is the latest tomato genome release from solGenomics.net.
# The Spenn.fasta genome is the recent S. pennellii genome release from solGenomics.net.
PATH_GENOME_FASTA_1 := $(DIR_GENOME_DATA_1)/ITAG2.4_genomic.fasta
PATH_GENOME_FASTA_2 := $(DIR_GENOME_DATA_2)/Spenn.fasta


# Directory in which to place output files that are generated from the FASTA files.
# This directory will be created if it doesn't exist.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_GENOME_OUT_DATA := $(DIR_SCARF_OUT)/GenomeData


# Prefix, including directory, of output files that will be generated from the
# FASTA files.  These files are created for each genome:
# 1. A list of genome FASTA file sequence IDs and their lengths:
#       <this prefix><genome_number>.idlens
# 2. A list of sequence contig information: for each contig, the sequence ID,
#   start position, contig sequence number, and contig length:
#       <this prefix><genome_number>.contigs
# 3. A file of genome DNA sequences around each k-mer:
#       <this prefix><genome_number>.dnaseqs
### THIS DOES NOT NEED TO BE CHANGED.

PFX_GENOME_DATA_FILE := $(DIR_GENOME_OUT_DATA)/Genome_


################################################################################
# Paths of k-mer data output files.
################################################################################

# Directory in which to place k-mer data output files.  This directory will be
# created if it doesn't exist.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_KMERS := $(DIR_SCARF_OUT)/Kmers


# Prefix, including directory, of output files that will be generated containing
# k-mer information.  These files are created for each genome:
# 1. a list of unique k-mers in the genome:
#       <this prefix><genome_number>.kmers_0 (and perhaps _1, etc.)
# 2. a text file of k-mer statistics:
#       <this prefix><genome_number>.stats
# 3. a list of SORTED unique k-mers in the genome:
#       <this prefix><genome_number>.isect.sorted
# 4. A list of positions of unique k-mers in the genome:
#       <this prefix><genome_number>.isect
### THIS DOES NOT NEED TO BE CHANGED.

PFX_KMERS_DATA_FILE := $(DIR_KMERS)/Kmers_


# Path of the k-mer text file containing the intersection of unique k-mers which
# are common to all genomes.  This file will be created.
### THIS DOES NOT NEED TO BE CHANGED.

PATH_ISECT_KMERS := $(DIR_KMERS)/isect.kmers


# Directory in which to place per-sequence-ID split-up versions of the PATH_POS_KMERS_
# files, N_GENOMES files per distinct sequence ID in the reference genome.  This
# directory will be created if it doesn't exist.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_SPLIT_KMERS := $(DIR_KMERS)/Split


# Prefix, including directory, of output files that are portions of the above
# unique k-mer position files for each genome, each portion containing the data
# for k-mers located along one sequence ID of the REFERENCE genome.  The number
# of files created for each genome is equal to the number of sequence IDs (e.g.
# number of chromosomes) in the reference genome FASTA file.  The file names are
# this prefix, with suffix <genome_number>_<ref_genome_sequence_ID>.isect.split
### THIS DOES NOT NEED TO BE CHANGED.

PFX_SPLIT_UNIQ_KMERS_FILE := $(DIR_SPLIT_KMERS)/Split_


################################################################################
# Parameters affecting the SCAR marker algorithm.  All references to k-mers here
# are implicitly referring to common unique k-mers.
#
# All parameters here should be carefully reviewed and set by the user.
################################################################################

# Minimum number of sequential k-mers required to call a locally conserved
# region (LCR).  The larger this number, the less likely that LCRs will be
# called that are not actually conserved regions, and the fewer the number
# of LCRs that will be called.  Numbers too large will limit the number of
# markers created.  Smaller values make more LCRs and increase computation
# time.  Since e-PCR testing will validate all candidate markers, there is
# no reason not to set this to its minimum of 2 if you are only making
# markers.  If you want LCRs for another purpose such as a reliable indel
# list or for doing whole genome alignment, a larger value is advised.
# This should be at least two more than twice MINFLANK (defined below),
# since that is the minimum number of k-mers in an LCB that could result
# in in indel call.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

KMIN := 2


# Minimum acceptable length of an LCR in base-pairs.  This is normally equal
# to the minimum acceptable amplicon size AMIN (defined below), although it
# could be larger.  Smaller values make more LCRs and increase computation time.
### YOU PROBABLY WANT TO SET THIS EQUAL TO YOUR MINIMUM ACCEPTABLE AMPLICON LENGTH.

LMIN := 400


# Minimum distance in bp between two adjacent k-mers in an LCR.  If two k-mers are
# closer than this, the second one of the close pair is discarded.  This prevents
# a series of back-to-back k-mers in a conserved region from satisfying the KMIN
# setting or MINFLANK setting.  A value in the range of k would be reasonable.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

DMIN := 10


# Maximum distance in bp between two adjacent k-mers in an LCR.  If two adjacent
# k-mers are farther apart than this, the k-mers serve to split the LCR into two
# LCRs at that point.  An indel or marker is found on a single LCR, so this value
# limits the maximum indel and amplicon size.  This is normally equal to the
# maximum acceptable amplicon size AMAX (defined below), although it could be larger.
### YOU PROBABLY WANT TO SET THIS EQUAL TO YOUR MAXIMUM ACCEPTABLE DESIRED
### AMPLICON LENGTH.

DMAX := 1500


# Minimum SCAR marker amplicon size in any genome.
### SET THIS EQUAL TO YOUR MINIMUM ACCEPTABLE AMPLICON LENGTH.

AMIN := 400


# Maximum SCAR marker amplicon size in any genome.  The amplicon size will always
# be less than DMAX also.  This also limits the maximum indel size.
### SET THIS EQUAL TO YOUR MAXIMUM ACCEPTABLE AMPLICON LENGTH.

AMAX := 1500


# For a given SCAR marker, when the smallest amplicon size is AMIN, this is the
# minimum ADDITIONAL bp's of size required for the next larger amplicon.  If
# there are only two genomes or if NDAMIN is 2 (defined below), then if one
# genome's amplicon size is AMIN, the other's must be at least AMIN+ADMIN.
# For the purpose of finding indels only, this is the minimum indel size that
# will ever be found.
### SET THIS EQUAL TO YOUR MINIMUM ACCEPTABLE DIFFERENCE IN AMPLICON LENGTHS WHEN
### ONE AMPLICON'S LENGTH IS EQUAL TO AMIN AND ANOTHER IS AMIN+ADMIN.

ADMIN := 50


# For a given SCAR marker, when the largest amplicon size is AMAX, this is the
# minimum FEWER bp's of size required for the next smaller amplicon.  If there
# are only two genomes or if NDAMIN is 2 (defined below), then if one genome's
# amplicon size is AMAX, the other's must be no more than AMAX-ADMAX.
#
# Interpolation is linear between ADMIN and ADMAX.  The amplicon sizes for
# each genome are sorted smallest first, then the interpolated ADMIN/ADMAX
# value is applied to each amplicon except the last, and if fewer than NDAMIN
# genomes meet the test, the marker is discarded.
#
# The idea behind ADMIN/ADMAX is to require amplicons to be different enough in
# size that they can be easily distinguished on a gel, but that required size
# difference may scale up as the amplicon sizes grow.
#
# For the purpose of finding indels only, this should be set equal to ADMIN.
### SET THIS EQUAL TO YOUR MAXIMUM ACCEPTABLE DIFFERENCE IN AMPLICON LENGTHS WHEN
### ONE AMPLICON'S LENGTH IS EQUAL TO AMAX AND ANOTHER IS AMAX-ADMAX.

ADMAX := 300


# Minimum number of distinct amplicon sizes for each marker.  Set this to the
# number of genomes if you want distinct amplicon sizes for each genome.  Set
# it to a smaller value (>= 2) if fewer distinct sizes are acceptable.  For
# two genomes, this is always set to 2.  If for example there were 3 genomes
# and you set this to 3, all amplicons of a marker must be a different size,
# but if you set this to 2, as long as two genomes have different amplicon
# sizes, the marker is accepted (i.e. two genomes might have the same or
# similar-sized amplicons, but the third genome would have a different size).
### SET THIS EQUAL TO N_GENOMES IF YOU WANT ALL GENOMES TO PRODUCE DIFFERENT
### AMPLICON LENGTHS.  OTHERWISE, SET IT TO THE MINIMUM NUMBER OF ACCEPTABLE
### DIFFERENT AMPLICON LENGTHS.
NDAMIN := 2


# Minimum number of k-mers to the left of the left-side indel k-mer and to the
# right of the right-side indel k-mer.  May be 0 for none.  The indel k-mers are
# the two common unique k-mers, one on each end of an indel, at which primers
# are designed.  An indel can require only those two k-mers, if MINFLANK is 0.
# The number of k-mers that must be present in the LCR to create a candidate
# marker is at least 2+2*MINFLANK.  By setting this to a value larger than 0,
# you might decrease the odds that a single random common unique k-mer on the
# LCB could trigger creation of a SCAR marker, but since e-PCR testing of
# candidate primers will reject bad random markers, there is no reason not to
# leave this set to 0.  For the purpose of finding indels only, you may want
# to use a larger value than 0.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

MINFLANK := 0


# Number of base pairs of additional sequence to retrieve on each side of each
# of the two anchor k-mers of a SCAR marker, for the purpose of designing
# primers.  Primer parameters such as minimum and maximum size, and all other
# parameters, are set in a parameter file used by primer3 to design the primer.
# The value 2*EXTENSION_LEN + k is the maximum possible primer length.  Set
# EXTENSION_LEN large enough that you create multiple sites at which primers
# could possibly be found.  The maximum allowed setting for this is 50.  If
# this is >= minimum primer length, then it is possible a primer will be made
# in the extension region and not including ANY of the unique k-mer bases.
# This might make the primer less likely to be unique, but the e-PCR testing
# of the primers will catch those situations and reject those primers.  A
# value of 20 with k=14 provides 54 base-pairs of sequence in which to design
# a primer.  Note that N's are placed at positions where genomes differ in the
# extended regions on either side of the k-mer, so that primer3 will not design
# a primer on that position.  This means many candidate markers will fail to get
# a primer designed and so will be rejected.  All bases of the k-mer are of
# course identical across all genomes.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

EXTENSION_LEN := 20


# Two files of indels are produced, one of overlapping indels and another of
# non-overlapping indels.  Likewise, two files of SCAR markers are produced,
# one of overlapping markers and another of non-overlapping.  You may be
# interested in one or the other, overlapping or non-overlapping, or perhaps
# both.
#
# To explain the meaning of "overlapping" in this context, consider two indels
# or markers that follow one after another, the first bounded by k-mers A and B,
# and the second bounded by k-mers C and D.  Suppose that both AB and CD satisfy
# the parameters above such as AMIN and AMAX.  Now, it is entirely possible that
# AD also satisfies those parameters.  If it does, it will be included in the
# overlapping indel and SCAR marker files along with AB and CD, even though its
# amplicon includes both the AB and the CD amplicon regions, i.e. there is
# redundancy in the indels and SCAR markers within the overlapping files.
#
# The files of non-overlapping indels and SCAR markers are created by removing
# some indels or SCAR markers from the set of overlapping ones, so that after
# removal none of the indels or SCAR markers overlap.
#
# Two different methods are provided for determining which indels and markers
# to remove, and the following parameter chooses the method.  It must be the
# value MIN or else MAX, meaning:
#   MIN: when a set of indels/markers overlaps, the SMALLEST indel/marker within
#        the genome being tested is retained, and any indels/markers that overlap
#        it are removed.
#   MAX: when a set of indels/markers overlaps, the LARGEST indel/marker within
#        the genome being tested is retained, and any indels/markers that overlap
#        it are removed.
# That removal process is repeated until no more indels/markers overlap.  It is
# repeated for each genome as it is possible two indels/markers might overlap in
# one genome but not another.
#
# Therefore you would set this to MIN if you want to bias towards getting smaller
# indel or marker regions, and to MAX to bias towards larger ones.
### CHANGE THIS TO YOUR CHOICE OF THE TWO

OVERLAP_REMOVAL := MIN


# Maximum deviation in base pairs from expected amplicon size of off-target
# amplicons discovered by e-PCR (electronic PCR) testing of the candidate
# markers.  Set this to a value where, if there is an off-target amplicon
# whose size is within this amount of the target amplicon size, then you want
# that marker to be marked bad and deleted.
### SET THIS TO THE LARGEST AMPLICON SIZE POSSIBLE WITH YOUR PCR PARAMETERS SUCH
### AS THE EXTENSION TIME AND POLYMERASE POLYMERIZATION RATE.

EPCR_MAX_DEV := 3000


# Size, in base pairs, of a "hash word" in the e-PCR program.  This parameter has
# two different effects, unrelated unfortunately.  First, it determines the size
# of the data structure used for searching sequence data for primers, and in this
# context, a larger value uses more memory but can speed up the e-PCR operation,
# while a smaller value uses less memory but can cause inefficient use of hash
# tables, resulting in slow operation.  Second, it sets the number of base pairs
# starting at the 3' end of each primer, which must match EXACTLY with no gaps.
# In this context, a larger value means fewer off-target hits will be identified
# and removed as ambiguous markers, while a smaller value means more off-target
# hits will be identified and more markers will be removed as being ambiguous.
# Base pairs beyond this number in the primer are subject to the next two
# parameters, EPCR_MAX_MISMATCH and EPCR_MAX_GAPS.  The e-PCR program uses a
# default of 7 for this.  It probably shouldn't be made smaller than that, and
# probably should be made larger.  Larger values will result in more markers.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

EPCR_WORD_SIZE := 8


# Maximum number of off-target primer mismatches, in base pairs, within the
# primer outside of the EPCR_WORD_SIZE base pairs at the 3' end, during e-PCR
# (electronic PCR) testing of the candidate markers.  Set this to a size where,
# if there is an off-target approximate primer match with this many or fewer
# mismatched bases, then you want that marker to be marked bad and deleted.
# Larger values increase computation time and reduce number of markers obtained.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

EPCR_MAX_MISMATCH := 3


# Maximum number of off-target primer match gaps, in base pairs, within the
# primer outside of the EPCR_WORD_SIZE base pairs at the 3' end, during e-PCR
# (electronic PCR) testing of the candidate markers.  Set this to a size where,
# if there is an off-target approximate primer match with this many or fewer
# gaps in the mismatch, then you want that marker to be marked bad and deleted.
# Larger values increase computation time and reduce number of markers obtained.
### THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

EPCR_MAX_GAPS := 1


# For plotting number and density of final markers, this parameter sets the
# minimum value in the marker NDA column (which ranges from NDAMIN to the number
# of genomes) of the markers to be plotted.  For example, if you are making both
# 2-way and 3-way markers (3 genomes with NDAMIN=2) and want to plot only the
# 3-way markers count/density, set this to 3.
### THIS DOES NOT NEED TO BE CHANGED.
PLOT_NDAMIN := $(NDAMIN)


# For plotting number and density of final markers, this parameter sets the
# alpha intensity with which black lines are drawn on chromosomes at marker
# positions.  This must be greater than 0 and no more than 1.  At 1, a single
# line is black.  As the value moves towards 0, and single line is lighter and
# lighter gray, and multiple lines must be plotted on top of each other to
# achieve black pixels.  For example, 0.25 would need 4 markers to get to black.
### THIS DOES NOT NEED TO BE CHANGED.
PLOT_ALPHA := 0.25


################################################################################
# Paths of primer data files.
################################################################################

# Path of primer3 settings file.  You must create this file by copying file
# primer3Settings.default.txt, which is a modified version of the settings file
# named primer3web_v4_0_0_default_settings.txt that is part of the primer3
# V2.3.6 distribution.  The changes made to that file were:
#   1. Changed the descriptive string P3_FILE_ID
#   2. Added PRIMER_THERMODYNAMIC_PARAMETERS_PATH to point to primer3_config
#       subfolder in installed primer3 distribution.
#   3. Changed PRIMER_EXPLAIN_FLAG from 1 to 0.
#   4. Changed PRIMER_PRODUCT_SIZE_RANGE to twice PRIMER_MIN_SIZE followed by
#       "-300", e.g. 36-300
#   5. Changed PRIMER_NUM_RETURN from 5 to 1.
#   6. Changed PRIMER_GC_CLAMP from 0 to 1.
# COPY primer3Settings.default.txt to the file name given here, then EDIT it to
# set PRIMER_THERMODYNAMIC_PARAMETERS_PATH to the path of the primer3_config
# directory that was included in the primer3 distribution.  You can change any
# other primer design parameters you want, including the above (except leave
# PRIMER_NUM_RETURN at 1; only one primer pair per marker is retained).  Refer
# to the primer3 manual for an explanation of all the parameters.  Refer to
# SCARF install instructions for more details.
### THIS DOES NOT NEED TO BE CHANGED BUT THE FILE MUST BE COPIED AND EDITED.

PATH_PRIMER3_SETTINGS := Primer3Settings.txt # In SCARF installation directory.


# Directory in which to place these files.  This directory will be created if it
# doesn't exist.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_PRIMER_DATA := $(DIR_SCARF_OUT)/Primers


# Path of data file to be created containing sequence data for use by primer3
# when designing primers.
### THIS DOES NOT NEED TO BE CHANGED.

PATH_PRIMER3_DATA := $(DIR_PRIMER_DATA)/Primer3Data.txt


# Path of data file to be created by primer3 containing primer design results.
### THIS DOES NOT NEED TO BE CHANGED.

PATH_PRIMER3_OUT := $(DIR_PRIMER_DATA)/Primer3Out.txt


################################################################################
# Output directory of main output files.
################################################################################

# Path to the directory where the LCR, indel, and marker output files will
# be placed.
### THIS DOES NOT NEED TO BE CHANGED.

DIR_MAIN_OUTPUT := $(DIR_SCARF_OUT)


################################################################################
# Filename prefixes of main output files.
################################################################################

# Filename prefix of LCR data file and bad K-mer data file.
### THESE DO NOT NEED TO BE CHANGED.

PFX_LCR_FILE := LCRs
PFX_BAD_KMERS_FILE := BadKmers


# Filename prefixes of INDELs data files.
### THESE DO NOT NEED TO BE CHANGED.

PFX_OVERLAPPING_INDELS_FILE := IndelsOverlapping
PFX_NONOVERLAPPING_INDELS_FILE := IndelsNonoverlapping


# Filename prefix of SCAR marker file, prior to e-PCR verification.
### THIS DOES NOT NEED TO BE CHANGED.

PFX_MARKER_DATA_FILE := CandidateMarkers


# Filename prefix of e-PCR bad marker file.
### THIS DOES NOT NEED TO BE CHANGED.

PFX_BAD_MARKER_ERROR_FILE := MarkerErrors


# Filename prefixes of "good" SCAR marker files, with bad (by e-PCR) markers removed.
### THESE DO NOT NEED TO BE CHANGED.

PFX_OVERLAPPING_MARKERS_FILE := MarkersOverlapping
PFX_NONOVERLAPPING_MARKERS_FILE := MarkersNonoverlapping


# Filename prefixes of SCAR marker count and density plot files.
### THESE DO NOT NEED TO BE CHANGED.

PFX_MARKER_COUNTS_FILE := MarkerCounts
PFX_MARKER_DENSITY_FILE := MarkerDensity


################################################################################
# Filename suffixes of main output files.
################################################################################

# Filename suffixes for the main output files are defined here.  These suffixes
# grow longer and longer as you move down the page here, each containing the
# previous one and adding to it.  These are long because they include as part
# of the filename all of the parameter values used to make the file.  These
# prefixes form UNWIELDY file names that are not really necessary, but are
# useful if you try different parameter values and want to keep track of the
# different output files.  However, if you only plan to experiment with a
# limited number of parameter values, you could simplify these prefixes to
# only include those parameter values as part of the prefix.  Or, you can
# make the prefixes be very simple or even empty, if you want simple file
# names and will delete or archive existing files when you make parameter
# changes.
# An advantage of putting parameter values that change into the file name is
# that, when you make a parameter change, 'make' will rebuild only the files
# it needs to, and the ones whose name remains the same because they were built
# at an earlier step whose parameters remain unchanged are not rebuilt, saving
# build time. 
### FOR EXAMPLE, YOU MIGHT WANT ALL PREFIXES TO BE SIMPLY _$(DMIN)_$(DMAX)
### OR, A MORE COMPLEX EXAMPLE THAT INCLUDES THE e-PCR PARAMETERS IN FINAL OUTPUT FILES:
### Set SFX_ constants to _$(DMIN)_$(DMAX) except leave SFX_GOOD_MARKER_FILE as-is.


# Suffix to use for the files created when LCRs are called.
### THIS DOES NOT NEED TO BE CHANGED.

# (This includes in the filename the parameter values used to find LCRs)
SFX_LCR_FILE := _K$(K)k$(KMIN)L$(LMIN)D$(DMIN)_$(DMAX)


# Suffix to use for the file that holds INDEL positions.
### THIS DOES NOT NEED TO BE CHANGED.

# (This includes all of SFX_LCR_FILE and the parameter values used to find markers)
SFX_INDELS_FILE := $(SFX_LCR_FILE)A$(AMIN)_$(AMAX)d$(ADMIN)_$(ADMAX)N$(NDAMIN)F$(MINFLANK)


# Suffix to use for the files containing SCAR markers with primers and marker
# density plots.
### THIS DOES NOT NEED TO BE CHANGED.

# (This includes all of SFX_SEQ_FILE and the parameters used when extracting DNA
# and making primers)
SFX_MARKER_FILE := $(SFX_INDELS_FILE)X$(EXTENSION_LEN)


# Suffix to use for the files that hold candidate SCAR marker primers, both
# before and after e-PCR testing.
### THIS DOES NOT NEED TO BE CHANGED.

# (This includes all of SFX_MARKER_FILE and the parameter values used for e-PCR)
SFX_GOOD_MARKER_FILE := $(SFX_MARKER_FILE)V$(EPCR_MAX_DEV)W$(EPCR_WORD_SIZE)M$(EPCR_MAX_MISMATCH)G$(EPCR_MAX_GAPS)


################################################################################
# Full pathnames of main output files.  These pathnames are formed by joining
# DIR_MAIN_OUTPUT/PFX_*/SFX_*, where all of these variables were defined
# immediately above.  Do not change the names here.  To change the names,
# change the prefixes and/or suffixes.
################################################################################

# Paths of LCR data file and bad K-mer data file.
### DO NOT CHANGE THESE.

PATH_LCR_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_LCR_FILE)$(SFX_LCR_FILE).tsv
PATH_BAD_KMERS_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_BAD_KMERS_FILE)$(SFX_LCR_FILE).tsv


# Paths of INDELs data files.
### DO NOT CHANGE THESE.

PATH_OVERLAPPING_INDELS_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_OVERLAPPING_INDELS_FILE)$(SFX_INDELS_FILE).tsv
PATH_NONOVERLAPPING_INDELS_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_NONOVERLAPPING_INDELS_FILE)$(SFX_INDELS_FILE).tsv


# Path of SCAR marker file, prior to e-PCR verification.
### DO NOT CHANGE THIS.

PATH_MARKER_DATA_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_MARKER_DATA_FILE)$(SFX_MARKER_FILE).tsv


# Path prefix of SCAR marker e-PCR bad marker file as determined by e-PCR,
# excluding only the suffix, which consists of "_<genome letter>.bad.tsv".
### DO NOT CHANGE THIS.

PFX_BAD_MARKER_ERROR_PATH := $(DIR_MAIN_OUTPUT)/$(PFX_BAD_MARKER_ERROR_FILE)$(SFX_GOOD_MARKER_FILE)_


# Paths of "good" SCAR marker files, with bad (by e-PCR) markers removed.
### DO NOT CHANGE THESE.

PATH_OVERLAPPING_MARKERS_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_OVERLAPPING_MARKERS_FILE)$(SFX_GOOD_MARKER_FILE).tsv
PATH_NONOVERLAPPING_MARKERS_FILE := $(DIR_MAIN_OUTPUT)/$(PFX_NONOVERLAPPING_MARKERS_FILE)$(SFX_GOOD_MARKER_FILE).tsv


# Path prefixes of SCAR marker counts and density plot files.  ".pdf" is appended
# to the counts file path, and "_<genome letter>.png" is appended to the density
# file path.
### DO NOT CHANGE THESE.

PFX_MARKER_COUNTS_PATH := $(DIR_MAIN_OUTPUT)/$(PFX_MARKER_COUNTS_FILE)$(SFX_GOOD_MARKER_FILE)
PFX_MARKER_DENSITY_PATH := $(DIR_MAIN_OUTPUT)/$(PFX_MARKER_DENSITY_FILE)$(SFX_GOOD_MARKER_FILE)


################################################################################
# Paths of debugging settings.  Set these TRUE to turn on debug output from
# individual modules.
################################################################################

# Produce debug output whencalling LCRs.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_FINDLCRS := FALSE


# Produce debug output whenanalyzing LCRs for INDELs.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_ANALYZELCRS := FALSE


# Produce debug output whengetting DNA sequences at indel k-mers.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_GETDNASEQS := FALSE


# Produce debug output whenfinding primers.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_FINDPRIMERS := FALSE


# Produce debug output whendoing e-PCR testing of marker primer pairs.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_EPCRTESTING := FALSE


# Produce debug output whenremoving markers identified as bad by e-PCR.
### THIS DOES NOT NEED TO BE CHANGED.

INVESTIGATE_RMVBADMARKERS := FALSE


################################################################################
# End of file.
################################################################################
