################################################################################
################################################################################

# This is an IGGPIPE "tool path" parameter file template.  Copy this file
# to the file named "allPathParameters.ours", then edit it and set the path
# parameters as described in the comments below.

# This file is included by 'Makefile' to set tool paths to be used by 'make'.

# All tool paths and many tool argument settings required for running the
# IGGPIPE pipeline are defined here.  They should set one time, during IGGPIPE
# installation, in file "allPathParameters.ours", and from then on, no one
# should need to touch these settings.

# This is a TEMPLATE FILE giving an example of how to define each parameter.
#@@ DO NOT EDIT THIS FILE.  COPY THIS FILE to "allPathParameters.ours" and
# edit THAT file.

#@@ Many definitions in here should NEVER need to be changed.  Each parameter
#@@ has a BOLD COMMENT STARTING WITH "#@@" saying whether that parameter should
#@@ be changed, seldom needs changed, already has a reasonable value, etc.

# This file has been filled in with actual values as EXAMPLES.  CHANGE these
# values to appropriate ones for your system.

# If a pathname here doesn't start with "/", it is relative to the IGGPIPE
# install directory.

# All definitions in this file are 'make' variable assignments.  A variable is
# replaced by its value when you write $(VARIABLE_NAME).  Some variables are
# defined here and then used in $() constructs in subsequent definitions of
# other variables.  You can add as many of your own variables as you want to
# this file to help you define directory and file names.

# All system environment variables are automatically predefined as make variables
# by 'make' itself, so you can use $(ENVIRONMENT_VARIABLE_NAME) to access the
# value of an environment variable.

################################################################################
################################################################################


################################################################################
# Path of the working directory.  This must be a complete pathname, not ".", of
# the IGGPIPE installation directory.
################################################################################

# In this example I use a path on my computer where my IGGPIPE files are located,
# and I refer to the environment variable BRADYLAB which I have set to the
# path of my Brady lab root folder.
#@@ CHANGE THIS TO YOUR IGGPIPE DIRECTORY.

WD := $(BRADYLAB)/Genomes/kmers/IGGPIPE


################################################################################
# Paths of required installed software outside of the pipeline software, and
# commands for running it.
################################################################################

# Path to the file that is the 'jellyfish' program file.  Use the command line
# command 'which jellyfish' to show this path on your computer, and put it here.
# Be sure you are using a version of Jellyfish that is new enough, see INSTALL.
#@@ CHANGE THIS TO YOUR PATH.

# This is what 'which jellyfish' showed on my computer.
PATH_JELLYFISH := /usr/local/bin/jellyfish


# Number of entries in Jellyfish hash.  This should be large enough to make
# Jellyfish run fast, without being so large that it uses up more memory than
# is available.  On a 16GB RAM machine, I was able to use a size of 80M.
#@@ THIS IS A REASONABLE VALUE FOR THIS PARAMETER.

JELLYFISH_HASH_SIZE := 80M


# Path to the file that is the 'perl' program file.  Use the command line command
# 'which perl' to show this path on your computer, and put it here.
#@@ CHANGE THIS TO YOUR PATH.

# This is what 'which perl' showed on my computer.
PATH_PERL := ~/perl5/perlbrew/perls/perl-5.16.0/bin/perl


# Path to the file that is the 'Rscript' program file that is part of the R
# programming system.  The 'Rscript' program allows an R program to be run from
# the command line.  After installing the R programming system, use the command
# line command 'which Rscript' to show this path on your computer, and put it here.
#@@ CHANGE THIS TO YOUR PATH.

# This is what 'which Rscript' showed on my computer.
PATH_RSCRIPT := /usr/bin/Rscript


# Path to the file that is the 'primer3_core' program file that is part of the
# primer3 package.  Set this to the primer3core file in the directory where you
# built primer3 or to the place where you moved it such as a bin directory.
#@@ CHANGE THIS TO YOUR PATH.

# In this example, after downloading the pre-built OSX primer3 package, I moved
# the primer3-2.3.6 directory containing the files to my ~/src directory.
PATH_PRIMER3CORE := /Users/tedtoal/src/primer3-2.3.6/primer3_core


# Path to the directory containing the primer3 thermodynamic parameters files,
# most of which have suffix '.ds' or '.dh'.  This directory is distributed with
# the primer3 package, it is normally named 'primer3_config', and it is normally
# in the same directory as the above primer3_core program. Set this to the
# path of the primer3_config directory that came with primer3.
#@@ CHANGE THIS TO YOUR PATH.

# In this example, after downloading the pre-built OSX primer3 package, I moved
# the primer3-2.3.6 directory containing the files to my ~/src directory.  Note
# that the full path must be specified, "~" cannot be used here.
PATH_PRIMER3CONFIG := /Users/tedtoal/src/primer3-2.3.6/primer3_config


# Path to the file that is the 'e-PCR' program file that is part of the NCBI
# e-PCR package.  Set this to the e-PCR file in the directory where you built
# e-PCR or to the place where you copied it such as a bin directory.
#@@ CHANGE THIS TO YOUR PATH.

# In this example, I downloading the e-PCR zip file to my ~/src folder and
# unzipped it and built "e-PCR" there.
PATH_EPCR := ~/src/e-PCR-2.3.12/e-PCR


# Path to the file that is the 'MUSCLE' multiple alignment program file.  Set
# this to the executable MUSCLE program file in the directory where you copied
# or downloaded it, such as a bin directory.
#@@ CHANGE THIS TO YOUR PATH.

# In this example, I downloading the MUSCLE file to my ~/bin folder.
PATH_ALIGNER := ~/bin/muscle3.8.31_i86darwin64


################################################################################
# Paths of software that is part of the pipeline software, and commands for
# running it.
################################################################################


# Path of the directory containing the pipeline "findMers.cpp" file and, after
# findMers.cpp has been compiled, the "findMers" file.
#@@ THIS DOES NOT NEED TO BE CHANGED.

DIR_FINDMERS := code/cpp/findMers


# Path to the file that is the 'findMers' program file.
#@@ THIS DOES NOT NEED TO BE CHANGED.

PATH_FINDMERS := $(DIR_FINDMERS)/findMers


# Arguments for running the 'findMers' program.
#@@ THIS DOES NOT NEED TO BE CHANGED.

ARGS_FINDMER := -c


# Path of the directory containing pipeline Perl scripts.
#@@ THIS DOES NOT NEED TO BE CHANGED.

DIR_PERL := code/perl


# Path of the pipeline Perl scripts.
#@@ THESE DO NOT NEED TO BE CHANGED.

PATH_EXTRACT_SEQ_IDS := $(DIR_PERL)/extractSeqIdsAndLengths.pl
PATH_KMER_ISECT := $(DIR_PERL)/kmerIsect.pl
PATH_GET_SEQS_FASTA := $(DIR_PERL)/getSeqsFromFasta.pl


# Path of the directory containing pipeline R scripts.
#@@ THIS DOES NOT NEED TO BE CHANGED.

DIR_R := code/R


# Path of the pipeline R scripts.
#@@ THESE DO NOT NEED TO BE CHANGED.

PATH_FIND_LCRS := $(DIR_R)/findLCRs.R
PATH_FIND_INDEL_GROUPS := $(DIR_R)/findIndelGroups.R
PATH_GET_DNA_SEQS := $(DIR_R)/getDNAseqs.R
PATH_FIND_PRIMERS := $(DIR_R)/findPrimers.R
PATH_EPCR_TESTING := $(DIR_R)/ePCRtesting.R
PATH_RMV_BAD_MARKERS := $(DIR_R)/removeBadMarkers.R
PATH_PLOT_MARKERS := $(DIR_R)/plotMarkers.R
PATH_ALIGN_AND_GET_INDELS := $(DIR_R)/alignAndGetIndels.R
PATH_PLOT_INDELS := $(DIR_R)/plotIndels.R


################################################################################
# Delete or trash files when invoking make to clean files?
################################################################################

# Path of the directory containing unix shell files.
#@@ THIS SHOULD NOT NEED TO BE CHANGED FOR UNIX-BASED SYSTEMS.

DIR_SHELL := code/shell


# Command to invoke shell file trash.sh to move files to the trash bin.  If your
# system has no trash bin, remove this and don't use it below.
#@@ THIS DOES NOT NEED TO BE CHANGED.

# (This shell file command will work on Mac OSX to move files to the trash bin.)
CMD_TRASH := $(SHELL) $(DIR_SHELL)/trash.sh


# Command to delete file(s) including directories.
# For systems based on UNIX, such as Mac OSX, use one of these:
#   rm -f       If you want CLEAN_OUT_DIR to leave directories but remove files.
#   rm -fd      If you want CLEAN_OUT_DIR to remove directories and their files.
#@@ THIS SHOULD NOT NEED TO BE CHANGED FOR UNIX-BASED SYSTEMS.

CMD_DELETE := rm -fd


# Command for deleting files when you do 'make' with CLEAN=1 or CLEAN_OUT_DIR=1.
# Set this to '$(CMD_DELETE)' if you want to completely delete files when you do
# a "clean" operation for removing files, or set it to '$(CMD_TRASH)' to move
# the files to the trash bin.
#@@ CHANGE THIS TO YOUR CHOICE OF THE TWO

CMD_DELETE_WHEN_CLEANING := $(CMD_TRASH)


################################################################################
# End of file.
################################################################################
